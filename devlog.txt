Old MACdonald
Clive Johnson
Angela Kim
Manahal Tabassum
pd 5
---------------------
The UNOfficial Game of UNO

/////////// Zone of Reflection \\\\\\\\\\\
------------------------------------------
OBSTACLES OVERCOME
-We had lots of issues with variables in Woo. We wanted other classes and their methods to be able to access and mutate variables in Woo, but this wasn't working as we didn't know how to do this for an instance (unless the instance itself was passed as a variable in every method). To overcome this, we made Woo static, and this fixed all of those issues. We had the same issue for Deck, and also took advantage of static in the same way there. 
-Another issue we had was with incremental development. Since there were so many different pieces to this project (like all the different types of Cards), any problem in one of those files made the other ways not compile. So, about half way through this adventure, we all just went through all these bugs, until we got everything to compile.
-Early on, we had lots of merge issues. At school, this didn't happen because we were all together so we would make sure we were editing different files. But after these merge errors occurred a few times at home, we realized we needed better communication, so we started always updating each other on what we were doing, and those merge errors stopped happening.
-We also had issues with the wrapping around action of the user array. Because of the Reverse Card, we were getting negative numbers, and numbers high than the array index. We thought % would do the trick, and it did for numbers higher than the array index. But it turns out that % is not modulo. It is just remainder, so it works differently for negative numbers. To fix this, we had to write our own modulo function.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
UNRESOLVED ISSUES
-There is no room for a dumb user. If the user types in an invalid number or even a String at any point, their turn will either be skipped, or the game could crash. At the end, we realized to implement proper input handling would have taken a good amount of extra time, and we decided against doing it.
-We had the problem of drawing a Card from Deck, and then modifying it (this only applies to Draw Fours and Wild Cards as they can be modified). Then, if it was drawn again, it would have that modification. To fix this, we just multiplied the size of the deck by a factor of 10. This makes drawing the same card twice much less likely. However, this obviously isn't an ideal fix. Ideally, we would have returned a copy of a Card each time Deck was drawn from, but we think this would have required lots of extra code.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
COOL STUFF LEARNED
-We were having an issue with all this data being printed out at once. We wanted to give the user some time to digest the data, so we consulted the intertubes, and found out about sleep(), which momentarily pauses the program for a certain amount of time. This is a useful method to know, as it gives the programmer more control over the output of data.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MID-DEVELOPMENT DESIGN CHANGES
-We ended up making a separate Deck class, whose only purpose is to generate a deck, and then allow a random card to be drawn from it. Originally we were going to do this in Woo, and make it a static variable, but this kept Woo from getting too crowded, and its much more organized. Also, it allowed us to use only certain types of cards at times, which helped us with testing.
-Originally, every Card was going to have its own play method. However, we realized that every single play method has some things in common, like making sure that card can be played, and then putting it on top of the deck, and removing it from the player's inventory. So we decided to make two methods. choose() handles all of those similarities, and then play() is where the unique aspect of each Card gets implemented. This decision of making two different methods saved us from having to type lots of the same lines in every single Card subclass.
-We decided to make color a protected variable in the superclass rather than only use it individually in each subclass because we realized we can get rid of a bit of extra code with this.
-We added the instance var uno to a Player so we can determine whether or not the player has called uno and hence can win the game.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
LESSONS LEARNED 
-Use incremental development - it will save lots of time in the future
-Keep in contact with teammates to avoid merge errors, and to make sure everyone knows what is going on
-Make sure you know exactly what a method is doing when you use it (like %), because it might not be doing what you think it is
-game() in Woo ended up being pretty lengthy, and probably hard to read. We should have made helper methods
-Use descriptive comments (especially when working with other people) - but thankfully we were all pretty good with this
-Print lines are very helpful

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 ______   ______   __   __   __       ______   _______     
/_____/\ /_____/\ /_/\ /_/\ /_/\     /_____/\ /______/\    
\:::_ \ \\::::_\/_\:\ \\ \ \\:\ \    \:::_ \ \\::::__\/__  
 \:\ \ \ \\:\/___/\\:\ \\ \ \\:\ \    \:\ \ \ \\:\ /____/\ 
  \:\ \ \ \\::___\/_\:\_/.:\ \\:\ \____\:\ \ \ \\:\\_  _\/ 
   \:\/.:| |\:\____/\\ ..::/ / \:\/___/\\:\_\ \ \\:\_\ \ \ 
    \____/_/ \_____\/ \___/_(   \_____\/ \_____\/ \_____\/ 
==============================================================


2017-01-09
--------------------------------------------------------------
All members :: Revise proposal according to feedback
CJ :: UML for Woo.java
AK :: UML for Player class
MT :: UML for Cards class
==============================================================

2017-01-10
--------------------------------------------------------------
All members :: Worked on flowchart
    	       Worked on todo.txt
==============================================================

2017-01-11
--------------------------------------------------------------
AK :: Copied devlog template into devlog.txt
      Updated devlog
==============================================================

2017-01-12
--------------------------------------------------------------
AK :: Worked on Player.java
      -- added default constructor, overloaded constructor, and choose
      Updated devlog
      Updated UML diagram
MT :: Worked on Card.java
      -- made Card abstract, added instance vars, wrote abstract methods
      Worked on Number.java 
      -- added instance vars, overloaded constructor
      Updated UML diagram
      Updated devlog
      Updated flowchart
CJ :: Worked on Woo.java
      -- added instance vars, setup(), game(), and main method
      Worked on Number.java
      -- implemented toString(), play(), and canPlay() methods
==============================================================

2017-01-16
--------------------------------------------------------------
MT :: Worked on Wild.java, DrawTwo.java, & DrawFour.java
      -- added instance var, implemented abstract methods, added toString
      Updated devlog
CJ :: Created Deck.java
      —- populated vars with Cards
      Updated Woo.java
      —- modify it to use non-static variables, work on setup()
      Updated Player.java
      —- modified draw() to work with Deck.java
      Updated devlog
AK :: Created Reverse.java, Skip.java
      -- added instance vars, implemented abstract methods, added toString
      Updated Woo.java
      -- added accessor and mutator for direction
      Updated devlog
==============================================================

2017-01-17
--------------------------------------------------------------
CJ :: Worked on Woo
      — worked on game(), making variables static
      Worked on Player
      — update choose() to work with game() in Woo
      Worked on Number
      — modified canPlay() so it will work if topCard is not a number
MT :: Worked on the Card subclasses
      -- worked on eliminating compile time errors in the Card subclasses
      -- Fixed syntax in Number.java, DrawTwo.java, & DrawFour.java
AK :: Worked on Player
      - fixed errors in Player
      Fixed syntax in Woo, Deck
==============================================================
2017-01-20
--------------------------------------------------------------
CJ :: Worked on Woo
      -fixed the wrapping around of user, other bug fixes
AK :: Worked on Player
	  -got the last of errors in Player
==============================================================
2017-01-22
CJ :: Worked on everything!! Wohhoo lots of fun
      -modified toString() for all Cards
      -fixed issue with modulo
      -got rid of methods, variables we ended up not needing
      -Added function to game() in Woo so that it would only give users certain options, and not allow them to keep picking wrong cards to play
      -added ending in Woo
      -Bugss!!
AK :: Fixed problem with matching numbers not being played
MT :: Worked in all classes
      -cleaning up regarding terminal output
      -added the call to Uno functionality
      -resolved some bugs
      -added a way for the game to end
      -worked on small functionalities of cards like skipping over the player after a drawfour
      Worked on the UML Diagrams and Flowchart
==============================================================

